Resolving dependencies...
Configuring ghcjs-hplay-0.1.2.3...
Building ghcjs-hplay-0.1.2.3...
Failed to install ghcjs-hplay-0.1.2.3
Build log ( /root/.cabal/logs/ghcjs-hplay-0.1.2.3.log ):
Configuring ghcjs-hplay-0.1.2.3...
Building ghcjs-hplay-0.1.2.3...
Preprocessing library ghcjs-hplay-0.1.2.3...
[1 of 3] Compiling GHCJS.HPlay.View ( src/GHCJS/HPlay/View.hs, dist/build/GHCJS/HPlay/View.js_o )

src/GHCJS/HPlay/View.hs:732:7:
    Couldn't match type ‘JSRef GHCJS.Types.JSString_’ with ‘[Char]’
    Expected type: View view m String
      Actual type: View view m JSString
    In the expression:
      View
      $ do { tolook <- genNewId;
             r <- getParam1 tolook `asTypeOf` typef res;
             case r of {
               Validated x -> return $ FormElm (ftextarea tolook x) $ Just x
               NotValidated s err
                 -> return $ FormElm (ftextarea tolook (toJSString s)) Nothing
               NoParam -> return $ FormElm (ftextarea tolook nvalue) Nothing } }
    In an equation for ‘res’:
        res
          = View
            $ do { tolook <- genNewId;
                   r <- getParam1 tolook `asTypeOf` typef res;
                   case r of {
                     Validated x -> return $ FormElm (ftextarea tolook x) $ Just x
                     NotValidated s err
                       -> return $ FormElm (ftextarea tolook (toJSString s)) Nothing
                     NoParam -> return $ FormElm (ftextarea tolook nvalue) Nothing } }
          where
              typef :: View v m String -> StateT MFlowState m (ParamResult v a)
              typef = undefined
    In an equation for ‘getMultilineText’:
        getMultilineText nvalue
          = res
          where
              res
                = View
                  $ do { tolook <- genNewId;
                         .... }
                where
                    typef :: View v m String -> StateT MFlowState m (ParamResult v a)
                    typef = undefined

src/GHCJS/HPlay/View.hs:1136:81:
    Couldn't match expected type ‘Maybe (Int, Int)’
                with actual type ‘IO (Maybe a15)’
    Relevant bindings include
      r :: JSRef a15 (bound at src/GHCJS/HPlay/View.hs:1136:61)
    In the expression: fromJSRef r
    In a pattern binding: Just (x, y) = fromJSRef r

src/GHCJS/HPlay/View.hs:1137:33:
    Couldn't match type ‘IO ()’ with ‘JSRef a15 -> IO b8’
    Expected type: JSFun (JSRef a15 -> IO b8) -> IO ()
      Actual type: JSFun (IO ()) -> IO ()
    In the second argument of ‘(>>=)’, namely
      ‘addEvListener elem (eventName e)’
    In the expression:
      syncCallback1
        NeverRetain
        False
        (\ r
           -> let Just (x, y) = fromJSRef r
              in (setDat io $ EventData (nevent e) $ Mouse (x, y)))
      >>= addEvListener elem (eventName e)

src/GHCJS/HPlay/View.hs:1142:62:
    Couldn't match expected type ‘JSRef a14’
                with actual type ‘(Int, Int)’
    In the pattern: (x, y)
    In the third argument of ‘syncCallback1’, namely
      ‘(\ (x, y) -> (setDat io $ EventData (nevent e) $ Mouse (x, y)))’
    In the first argument of ‘(>>=)’, namely
      ‘syncCallback1
         NeverRetain
         False
         (\ (x, y) -> (setDat io $ EventData (nevent e) $ Mouse (x, y)))’

src/GHCJS/HPlay/View.hs:1143:33:
    Couldn't match type ‘IO ()’ with ‘JSRef a14 -> IO b7’
    Expected type: JSFun (JSRef a14 -> IO b7) -> IO ()
      Actual type: JSFun (IO ()) -> IO ()
    In the second argument of ‘(>>=)’, namely
      ‘addEvListener elem (eventName e)’
    In the expression:
      syncCallback1
        NeverRetain
        False
        (\ (x, y) -> (setDat io $ EventData (nevent e) $ Mouse (x, y)))
      >>= addEvListener elem (eventName e)

src/GHCJS/HPlay/View.hs:1154:63:
    Couldn't match expected type ‘JSRef b6’
                with actual type ‘(Int, Int)’
    In the pattern: (x, y)
    In the third argument of ‘syncCallback2’, namely
      ‘(\ i (x, y)
          -> (setDat io $ EventData (nevent e) $ Click i (x, y)))’
    In the first argument of ‘(>>=)’, namely
      ‘syncCallback2
         NeverRetain
         False
         (\ i (x, y)
            -> (setDat io $ EventData (nevent e) $ Click i (x, y)))’

src/GHCJS/HPlay/View.hs:1154:115:
    Couldn't match expected type ‘Int’ with actual type ‘JSRef a13’
    Relevant bindings include
      i :: JSRef a13 (bound at src/GHCJS/HPlay/View.hs:1154:61)
    In the first argument of ‘Click’, namely ‘i’
    In the second argument of ‘($)’, namely ‘Click i (x, y)’

src/GHCJS/HPlay/View.hs:1155:11:
    Couldn't match type ‘IO ()’ with ‘JSRef a13 -> JSRef b6 -> IO c3’
    Expected type: JSFun (JSRef a13 -> JSRef b6 -> IO c3) -> IO ()
      Actual type: JSFun (IO ()) -> IO ()
    In the second argument of ‘(>>=)’, namely
      ‘addEvListener elem (eventName e)’
    In the expression:
      syncCallback2
        NeverRetain
        False
        (\ i (x, y) -> (setDat io $ EventData (nevent e) $ Click i (x, y)))
      >>= addEvListener elem (eventName e)

src/GHCJS/HPlay/View.hs:1160:63:
    Couldn't match expected type ‘JSRef b5’
                with actual type ‘(Int, Int)’
    In the pattern: (x, y)
    In the third argument of ‘syncCallback2’, namely
      ‘(\ i (x, y) -> setDat io $ EventData (nevent e) $ Click i (x, y))’
    In the first argument of ‘(>>=)’, namely
      ‘syncCallback2
         NeverRetain
         False
         (\ i (x, y) -> setDat io $ EventData (nevent e) $ Click i (x, y))’

src/GHCJS/HPlay/View.hs:1160:114:
    Couldn't match expected type ‘Int’ with actual type ‘JSRef a12’
    Relevant bindings include
      i :: JSRef a12 (bound at src/GHCJS/HPlay/View.hs:1160:61)
    In the first argument of ‘Click’, namely ‘i’
    In the second argument of ‘($)’, namely ‘Click i (x, y)’

src/GHCJS/HPlay/View.hs:1161:50:
    Couldn't match type ‘JSRef a12 -> JSRef b5 -> IO c2’ with ‘IO ()’
    Expected type: JSFun (IO ())
      Actual type: JSFun (JSRef a12 -> JSRef b5 -> IO c2)
    Relevant bindings include
      f :: JSFun (JSRef a12 -> JSRef b5 -> IO c2)
        (bound at src/GHCJS/HPlay/View.hs:1161:12)
    In the third argument of ‘addEvListener’, namely ‘f’
    In the expression: addEvListener elem (eventName e) f

src/GHCJS/HPlay/View.hs:1166:64:
    Couldn't match expected type ‘JSRef b4’
                with actual type ‘(Int, Int)’
    In the pattern: (x, y)
    In the third argument of ‘syncCallback2’, namely
      ‘(\ i (x, y)
          -> (setDat io $ EventData (nevent e) $ Click i (x, y)))’
    In the first argument of ‘(>>=)’, namely
      ‘syncCallback2
         NeverRetain
         False
         (\ i (x, y)
            -> (setDat io $ EventData (nevent e) $ Click i (x, y)))’

src/GHCJS/HPlay/View.hs:1166:115:
    Couldn't match expected type ‘Int’ with actual type ‘JSRef a11’
    Relevant bindings include
      i :: JSRef a11 (bound at src/GHCJS/HPlay/View.hs:1166:62)
    In the first argument of ‘Click’, namely ‘i’
    In the second argument of ‘($)’, namely ‘Click i (x, y)’

src/GHCJS/HPlay/View.hs:1167:11:
    Couldn't match type ‘IO ()’ with ‘JSRef a11 -> JSRef b4 -> IO c1’
    Expected type: JSFun (JSRef a11 -> JSRef b4 -> IO c1) -> IO ()
      Actual type: JSFun (IO ()) -> IO ()
    In the second argument of ‘(>>=)’, namely
      ‘addEvListener elem (eventName e)’
    In the expression:
      syncCallback2
        NeverRetain
        False
        (\ i (x, y) -> (setDat io $ EventData (nevent e) $ Click i (x, y)))
      >>= addEvListener elem (eventName e)

src/GHCJS/HPlay/View.hs:1172:63:
    Couldn't match expected type ‘JSRef b3’
                with actual type ‘(Int, Int)’
    In the pattern: (x, y)
    In the third argument of ‘syncCallback2’, namely
      ‘(\ i (x, y)
          -> (setDat io $ EventData (nevent e) $ Click i (x, y)))’
    In the first argument of ‘(>>=)’, namely
      ‘syncCallback2
         NeverRetain
         False
         (\ i (x, y)
            -> (setDat io $ EventData (nevent e) $ Click i (x, y)))’

src/GHCJS/HPlay/View.hs:1172:115:
    Couldn't match expected type ‘Int’ with actual type ‘JSRef a10’
    Relevant bindings include
      i :: JSRef a10 (bound at src/GHCJS/HPlay/View.hs:1172:61)
    In the first argument of ‘Click’, namely ‘i’
    In the second argument of ‘($)’, namely ‘Click i (x, y)’

src/GHCJS/HPlay/View.hs:1173:11:
    Couldn't match type ‘IO ()’ with ‘JSRef a10 -> JSRef b3 -> IO c0’
    Expected type: JSFun (JSRef a10 -> JSRef b3 -> IO c0) -> IO ()
      Actual type: JSFun (IO ()) -> IO ()
    In the second argument of ‘(>>=)’, namely
      ‘addEvListener elem (eventName e)’
    In the expression:
      syncCallback2
        NeverRetain
        False
        (\ i (x, y) -> (setDat io $ EventData (nevent e) $ Click i (x, y)))
      >>= addEvListener elem (eventName e)

src/GHCJS/HPlay/View.hs:1178:108:
    Couldn't match expected type ‘Int’ with actual type ‘JSRef a9’
    Relevant bindings include
      i :: JSRef a9 (bound at src/GHCJS/HPlay/View.hs:1178:62)
    In the first argument of ‘Key’, namely ‘i’
    In the second argument of ‘($)’, namely ‘Key i’

src/GHCJS/HPlay/View.hs:1179:11:
    Couldn't match type ‘IO ()’ with ‘JSRef a9 -> IO b2’
    Expected type: JSFun (JSRef a9 -> IO b2) -> IO ()
      Actual type: JSFun (IO ()) -> IO ()
    In the second argument of ‘(>>=)’, namely
      ‘addEvListener elem (eventName e)’
    In the expression:
      syncCallback1
        NeverRetain
        False
        (\ i -> (setDat io $ EventData (nevent e) $ Key i))
      >>= addEvListener elem (eventName e)

src/GHCJS/HPlay/View.hs:1184:60:
    Couldn't match expected type ‘Int -> b1’ with actual type ‘IO ()’
    The lambda expression ‘\ i
                             -> (setDat io $ EventData (nevent e) $ Key i)’
    has one argument,
    but its type ‘IO ()’ has none
    In the third argument of ‘syncCallback’, namely
      ‘(\ i -> (setDat io $ EventData (nevent e) $ Key i))’
    In the first argument of ‘(>>=)’, namely
      ‘syncCallback
         NeverRetain
         False
         (\ i -> (setDat io $ EventData (nevent e) $ Key i))’

src/GHCJS/HPlay/View.hs:1190:108:
    Couldn't match expected type ‘Int’ with actual type ‘JSRef a8’
    Relevant bindings include
      i :: JSRef a8 (bound at src/GHCJS/HPlay/View.hs:1190:62)
    In the first argument of ‘Key’, namely ‘i’
    In the second argument of ‘($)’, namely ‘Key i’

src/GHCJS/HPlay/View.hs:1191:11:
    Couldn't match type ‘IO ()’ with ‘JSRef a8 -> IO b0’
    Expected type: JSFun (JSRef a8 -> IO b0) -> IO ()
      Actual type: JSFun (IO ()) -> IO ()
    In the second argument of ‘(>>=)’, namely
      ‘addEvListener elem (eventName e)’
    In the expression:
      syncCallback1
        NeverRetain
        False
        (\ i -> (setDat io $ EventData (nevent e) $ Key i))
      >>= addEvListener elem (eventName e)

src/GHCJS/HPlay/View.hs:1237:17:
    ‘IsEvent’ is applied to too many type arguments
    In the type signature for ‘addEvent'’:
      addEvent' :: IsEvent a b => Perch -> a -> IO () -> Perch
    In an equation for ‘raiseEvent’:
        raiseEvent w event
          = View
            $ do { cont <- getCont;
                   FormElm render mx <- runView w;
                   let iohandler = ...
                       ....;
                   .... }
          where
              addEvent' :: IsEvent a b => Perch -> a -> IO () -> Perch
              addEvent' be eevent iohandler = Perch $ \ e -> ...

src/GHCJS/HPlay/View.hs:1263:39:
    Couldn't match type ‘[Char]’ with ‘JSRef GHCJS.Types.JSString_’
    Expected type: JSString
      Actual type: String
    In the second argument of ‘(==)’, namely ‘typ’
    In the first argument of ‘continueIf’, namely
      ‘(eventName event == typ)’

src/GHCJS/HPlay/View.hs:1285:16:
    Couldn't match expected type ‘StateT MFlowState IO t1’
                with actual type ‘IO a6 -> IO (JSFun (IO a6))’
    Probable cause: ‘syncCallback’ is applied to too few arguments
    In a stmt of a 'do' block:
      handler <- syncCallback NeverRetain False
    In the second argument of ‘($)’, namely
      ‘do { id <- genNewId;
            let f = ...;
            handler <- syncCallback NeverRetain False;
            let f = setTimeout t handler;
            .... }’

src/GHCJS/HPlay/View.hs:1287:12:
    Couldn't match expected type ‘t1 -> IO a7’ with actual type ‘IO ()’
    Relevant bindings include
      f :: IO a7 (bound at src/GHCJS/HPlay/View.hs:1287:9)
      handler :: t1 (bound at src/GHCJS/HPlay/View.hs:1285:5)
    The function ‘setTimeout’ is applied to two arguments,
    but its type ‘Int -> IO ()’ has only one
    In the expression: setTimeout t handler
    In an equation for ‘f’: f = setTimeout t handler

src/GHCJS/HPlay/View.hs:1377:17:
    Couldn't match type ‘IO ()’ with ‘PerchM ()’
    Expected type: Widget a
      Actual type: View (IO ()) IO a
    In the expression:
      View
      $ do { FormElm render mx <- (runView w);
             return $ FormElm (set render) mx }
    In an equation for ‘at’:
        at id method w
          = View
            $ do { FormElm render mx <- (runView w);
                   return $ FormElm (set render) mx }
          where
              set render
                = case method of {
                    Insert -> ...
                    Append -> ...
                    Prepend -> ... }

src/GHCJS/HPlay/View.hs:1383:29:
    Couldn't match expected type ‘Perch -> Perch’
                with actual type ‘PerchM ()’
    The function ‘this’ is applied to one argument,
    but its type ‘Perch’ has none
    In the first argument of ‘(<>)’, namely ‘this clear’
    In the second argument of ‘($)’, namely ‘this clear <> render’

src/GHCJS/HPlay/View.hs:1392:16:
    Couldn't match expected type ‘JSRef [Elem]’ with actual type ‘[t0]’
    In the pattern: []
    In a case alternative: [] -> build render e >> return ()
    In a stmt of a 'do' block:
      case es of {
        [] -> build render e >> return ()
        e' : _
          -> do { span <- newElem "span";
                  addChildBefore span e e';
                  .... } }

src/GHCJS/HPlay/View.hs:1392:47:
    Couldn't match type ‘()’
                  with ‘ghcjs-dom-0.1.1.1:GHCJS.DOM.Types.Element’
    Expected type: Elem
      Actual type: ()
    In the first argument of ‘return’, namely ‘()’
    In the second argument of ‘(>>)’, namely ‘return ()’

src/GHCJS/HPlay/View.hs:1393:16:
    Couldn't match expected type ‘JSRef [Elem]’
                with actual type ‘[Elem]’
    In the pattern: e' : _
    In a case alternative:
        e' : _
          -> do { span <- newElem "span";
                  addChildBefore span e e';
                  build render span;
                  .... }
    In a stmt of a 'do' block:
      case es of {
        [] -> build render e >> return ()
        e' : _
          -> do { span <- newElem "span";
                  addChildBefore span e e';
                  .... } }

src/GHCJS/HPlay/View.hs:1397:28:
    Couldn't match type ‘()’
                  with ‘ghcjs-dom-0.1.1.1:GHCJS.DOM.Types.Element’
    Expected type: Elem
      Actual type: ()
    In the first argument of ‘return’, namely ‘()’
    In a stmt of a 'do' block: return ()

src/GHCJS/HPlay/View.hs:1425:22:
    Couldn't match type ‘[Char]’ with ‘JSRef GHCJS.Types.JSString_’
    Expected type: [(JSString, Maybe JSString)]
      Actual type: [(String, Maybe JSString)]
    In the second argument of ‘lookup’, namely ‘rs’
    In the expression: lookup id rs

src/GHCJS/HPlay/View.hs:1427:59:
    Couldn't match type ‘[Char]’ with ‘JSRef GHCJS.Types.JSString_’
    Expected type: (String, Maybe JSString) -> JSString
      Actual type: (String, Maybe JSString) -> String
    In the second argument of ‘(.)’, namely ‘fst’
    In the first argument of ‘filter’, namely ‘((/= id) . fst)’

src/GHCJS/HPlay/View.hs:1432:57:
    Couldn't match type ‘JSRef GHCJS.Types.JSString_’ with ‘[Char]’
    Expected type: String
      Actual type: JSString
    In the first argument of ‘cb’, namely ‘id’
    In the second argument of ‘($)’, namely ‘cb id proc’

src/GHCJS/HPlay/View.hs:1452:57:
    Couldn't match type ‘IO (JSFun (IO a5))’
                  with ‘JSRef (GHCJS.Types.JSFun_ (JSRef (Maybe JSString) -> IO ()))’
    Expected type: JSFun (JSRef (Maybe JSString) -> IO ())
      Actual type: IO (JSFun (IO a5))
    Relevant bindings include
      cb' :: IO (JSFun (IO a5)) (bound at src/GHCJS/HPlay/View.hs:1455:9)
    In the fifth argument of ‘ajaxReq’, namely ‘cb'’
    In a stmt of a 'do' block:
      _ <- ajaxReq (toJSString $ show m) url' True pd cb'

src/GHCJS/HPlay/View.hs:1455:28:
    Couldn't match expected type ‘IO a5’
                with actual type ‘Maybe JSString -> IO ()’
    Relevant bindings include
      cb' :: IO (JSFun (IO a5)) (bound at src/GHCJS/HPlay/View.hs:1455:9)
    In the second argument of ‘($)’, namely ‘cb . fmap fromJSS'’
    In the expression: mkCallback $ cb . fmap fromJSS'
    In an equation for ‘cb'’: cb' = mkCallback $ cb . fmap fromJSS'

src/GHCJS/HPlay/View.hs:1457:85:
    Couldn't match type ‘[JSString]’ with ‘JSRef GHCJS.Types.JSString_’
    Expected type: JSString
      Actual type: [JSString]
    In the second argument of ‘catJSStr’, namely
      ‘[toJSString url, toQueryString kv]’
    In the expression:
      catJSStr (toJSString "?") [toJSString url, toQueryString kv]
    In the expression:
      if null kv then
          toJSString url
      else
          catJSStr (toJSString "?") [toJSString url, toQueryString kv]

src/GHCJS/HPlay/View.hs:1468:45:
    Couldn't match type ‘[JSString]’ with ‘JSRef GHCJS.Types.JSString_’
    Expected type: [(a, b)] -> JSString
      Actual type: [(a, b)] -> [JSString]
    In the second argument of ‘(.)’, namely
      ‘Prelude.map
         (\ (k, v)
            -> catJSStr (toJSString "=") [toJSString k, toJSString v])’
    In the expression:
      catJSStr (toJSString "&")
      . Prelude.map
          (\ (k, v)
             -> catJSStr (toJSString "=") [toJSString k, toJSString v])

src/GHCJS/HPlay/View.hs:1468:94:
    Couldn't match type ‘[JSString]’ with ‘JSRef GHCJS.Types.JSString_’
    Expected type: JSString
      Actual type: [JSString]
    In the second argument of ‘catJSStr’, namely
      ‘[toJSString k, toJSString v]’
    In the expression:
      catJSStr (toJSString "=") [toJSString k, toJSString v]
    In the first argument of ‘Prelude.map’, namely
      ‘(\ (k, v)
          -> catJSStr (toJSString "=") [toJSString k, toJSString v])’
In-place registering ghcjs-hplay-0.1.2.3...
Creating package registration file: /tmp/pkgConf-ghcjs-hplay-0.1.24251.3
Installing library in
/root/.cabal/lib/x86_64-linux-ghcjs-0.1.0_ghc-7.8.3/ghcjs-hplay-0.1.2.3
all.js: Error: Could not find module: GHCJS.HPlay.View with any suffix:
["js_hi"] in the search path: ["dist/build"]
